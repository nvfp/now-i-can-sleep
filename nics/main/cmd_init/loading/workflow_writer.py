import os

from mykit.kit.utils import printer

from nics.main.constants import __version__


def handle_dirs(load):
    
    ## Make /.github/ folder if it's not there yet
    pth = os.path.join(load, '.github')
    if os.path.exists(pth):
        if not os.path.isdir(pth):
            raise FileExistsError(f"Can't make /.github/ dir, this one exists: {repr(pth)}")
    else:
        printer(f'INFO: Creating dir {repr(pth)}.')
        os.mkdir(pth)
    
    ## Make /.github/workflows/ folder if it's not there yet
    pth = os.path.join(load, '.github', 'workflows')
    if os.path.exists(pth):
        if not os.path.isdir(pth):
            raise FileExistsError(f"Can't make /.github/workflows/ dir, this one exists: {repr(pth)}")
    else:
        printer(f'INFO: Creating dir {repr(pth)}.')
        os.mkdir(pth)


def get_text(author, email, gh_repo, main_branch_name, foo, bar):
    return f"""
# This file was generated by NICS ({__version__}).
# Documentation: https://github.com/nvfp/now-i-can-sleep

name: Rebuild documentation

on:
  push:
    branches:
      - {main_branch_name}

    paths:
      - '{foo}/**'  # Only rebuild if '{foo}/' folder is modified

      # When using 'use-repo-readme' keyword in 'tree/index.md'
      - README.md
      - readme.md

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  NICS-rebuild:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Run
        uses: nvfp/now-i-can-sleep@{__version__}
        with:
          load: {main_branch_name}
          dock: {bar}
          container: {foo}
          git-name: {author}
          git-email: {email}
          gh-repo-name: {gh_repo}
          nics-version: {__version__}
"""


def workflow_writer(load, author, email, gh_repo, main_branch_name):
    printer('INFO: Writing /.github/workflows/rebuild-docs.yml file.')

    ## Handle missing intermediate directories
    handle_dirs(load)

    file_path = os.path.join(load, '.github', 'workflows', 'rebuild-docs.yml')
    text = get_text(author, email, gh_repo, main_branch_name)
    with open(file_path, 'w') as f:
        f.write(text)

    printer(f'INFO: Done, {repr(file_path)} file is created.')