# Fast PyPI release (version 1.2.0).
# Documentation: https://nvfp.github.io/fast-pypi-release

name: Fast PyPI release

on:
  push:
    branches:
      - main  # EDITME

jobs:
  check-commit-message:
    runs-on: ubuntu-latest

    outputs:
      status: ${{ steps.check.outputs.status }}
      version: ${{ steps.check.outputs.version }}

    steps:
      - id: check
        name: Check commit message
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          echo "INFO: Commit message: '$COMMIT_MESSAGE'"

          # The regex ignore the word's casing (Release, RELEASE, release),
          # ref: https://stackoverflow.com/questions/44106842/case-insensitive-regex-in-bash .
          # set nocasematch option
          shopt -s nocasematch
          regex="^([0-9]+\.[0-9]+\.[0-9]+) Release.*"
          
          if [[ $COMMIT_MESSAGE =~ $regex ]]; then 
            echo "INFO: Pattern matched."
            ver="${BASH_REMATCH[1]}"
            echo "INFO: Version: $ver"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "version=$ver" >> $GITHUB_OUTPUT
          else
            echo "INFO: Pattern doesn't match."
            echo "status=fail" >> $GITHUB_OUTPUT
          fi

          # unset nocasematch option
          shopt -u nocasematch

  check-changelog-file:
    needs: check-commit-message
    if: needs.check-commit-message.outputs.status == 'success'

    runs-on: ubuntu-latest
    
    outputs:
      latest_changelog: ${{ steps.parse.outputs.latest_changelog }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: validation
        name: Validating
        run: |
          # Look (recursively) for files in the "docs" folder with "changelog" in their name (ignore case)
          files=$(find docs -iname "*changelog*")
          echo "DEBUG: files: '$files'"

          # Only one changelog file should be in the "docs" folder
          file_count=$(echo "$files" | wc -l)
          echo "DEBUG: file_count: $file_count"
          if [ "$file_count" -ne 1 ]; then
            echo "ERROR: Multiple changelog files found in the "docs" folder."
            exit 1
          fi

          # Pass the Changelog file path
          echo "pth=$files" >> $GITHUB_OUTPUT

      - id: parse
        name: Parse the latest changelog
        shell: python
        run: |
          import os
          import re
          import sys
          import uuid

          ## Open the Changelog file
          with open('${{ steps.validation.outputs.pth }}', 'r') as file:
            text = file.read()
          print(f'DEBUG: text: "{text}"')

          ## Parse the latest changelog
          res = re.search(r'^(?P<latest>- \d+\.\d+\.\d+.+?)\n-', text, re.MULTILINE | re.DOTALL)
          if res is None:
            print(f'ERROR: No latest changelog matches.')
            sys.exit(1)
          latest_changelog = res.group('latest')
          print(f'INFO: latest_changelog: "{latest_changelog}"')

          ## Parse the version from the latest changelog
          ver_from_changelog = re.search(r'\d+\.\d+\.\d+', latest_changelog).group()

          ## Match the versions
          ver_from_commit = '${{ needs.check-commit-message.outputs.version }}'
          if ver_from_changelog != ver_from_commit:
            print(f"ERROR: Versions don't match ({ver_from_commit} != {ver_from_changelog}).")
            sys.exit(1)
          print('INFO: Versions matched.')

          ## Pass the latest changelog for the step 'create-gh-release'
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            delimiter = uuid.uuid1()
            print(f'latest_changelog<<{delimiter}', file=fh)
            print(latest_changelog, file=fh)
            print(delimiter, file=fh)

  rewrite-pyproject-toml:
    needs: [check-commit-message, check-changelog-file]

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Rewriting
        run: |
          version="${{ needs.check-commit-message.outputs.version }}"
          echo "INFO: New version: '$version'"

          # Change the version
          sed -E -i "s/(version = \")[0-9]+\.[0-9]+\.[0-9]+/\1$version/" pyproject.toml

      - name: Commit
        run: |
          git config user.name "nvfp/fast-pypi-release"    # EDITME
          git config user.email "nicho@scapeville.com"  # EDITME
          git commit -am "Update the version in \`pyproject.toml\` â€” $(date +'%Y %b %e, %l:%M %p')"
          git push

  create-gh-release:
    needs: [check-commit-message, check-changelog-file, rewrite-pyproject-toml]

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # actions/checkout@v3 doesn't grab the latest commit. Perform a manual 'git pull' to get it.
      - name: Manual pull
        run: | 
          git pull
          echo "DEBUG: Run 'git log -2'"
          git log -2

      - name: Release
        uses: nvfp/gh-action-simple-release@1.8.0
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          tag: ${{ needs.check-commit-message.outputs.version }}
          desc: ${{ needs.check-changelog-file.outputs.latest_changelog }}

  publish-to-PyPI:
    needs: [check-commit-message, check-changelog-file, rewrite-pyproject-toml]

    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Checkout
        uses: actions/checkout@v3

      # actions/checkout@v3 doesn't grab the latest commit. Perform a manual 'git pull' to get it.
      - name: Manual pull
        run: | 
          git pull
          echo "DEBUG: Run 'git log -2'"
          git log -2

      - name: Build
        run: python -m build

      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*